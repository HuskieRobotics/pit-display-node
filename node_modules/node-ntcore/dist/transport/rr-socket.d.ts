/// <reference types="node" />
import { EventEmitter } from "events";
import { NetworkEndpointInfo } from "./transport-types";
import winston from "winston";
export interface RRSocketOptions {
    address?: string;
    port?: number;
    reconnectDelay?: number;
    ident?: string;
}
export interface AddressPortInfo {
    address: string;
    port: number;
}
/**
 * Re-targetable, Re-connecting Socket
 *
 * This socket wrapper allows re-targetting (having the same socket object
 * but connecting to a different endpoint), and re-connection (tries to
 * connect over and over)
 */
export default class RRSocket extends EventEmitter {
    private _socket;
    private _socketConnected;
    private _ident;
    private _reconnectTimeoutDelayMs;
    private _reconnectTimeoutHandle;
    private _address;
    private _port;
    private _logger;
    private _reconnectCount;
    constructor(options?: RRSocketOptions, logger?: winston.Logger);
    get address(): string;
    set address(val: string);
    get port(): number;
    set port(val: number);
    get connected(): boolean;
    setNetworkEndpoint(endpoint: NetworkEndpointInfo, forceReconnect?: boolean): void;
    connect(): void;
    disconnect(): void;
    write(data: Buffer): Promise<void>;
    private _hookupEvents;
    private _attemptReconnect;
    private _doConnect;
}
