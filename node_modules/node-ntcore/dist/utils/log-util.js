"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = void 0;
const winston_1 = __importStar(require("winston"));
const logFormat = winston_1.format.printf((info) => {
    const metadata = info.metadata ? " " + JSON.stringify(info.metadata) : "";
    return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}${metadata}`;
});
var LogLevel;
(function (LogLevel) {
    LogLevel["error"] = "error";
    LogLevel["warn"] = "warn";
    LogLevel["info"] = "info";
    LogLevel["verbose"] = "verbose";
    LogLevel["debug"] = "debug";
    LogLevel["silly"] = "silly";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
class LogUtil {
    static getLogger(moduleName = "DEFAULT") {
        if (!winston_1.default.loggers.has(moduleName)) {
            winston_1.default.loggers.add(moduleName, {
                format: winston_1.format.combine(winston_1.format.label({ label: moduleName }), winston_1.format.timestamp(), logFormat),
                transports: [new winston_1.transports.Console({
                        level: this.s_logLevel
                    })]
            });
            this.s_loggerNames.add(moduleName);
        }
        return winston_1.default.loggers.get(moduleName);
    }
    static setLogLevel(level, module) {
        this.s_loggerNames.forEach(moduleName => {
            if (!module || module === moduleName) {
                const logger = winston_1.default.loggers.get(moduleName);
                logger.transports.forEach(transport => {
                    transport.level = level;
                });
            }
        });
    }
}
exports.default = LogUtil;
LogUtil.s_loggerNames = new Set();
LogUtil.s_logLevel = LogLevel.info;
//# sourceMappingURL=log-util.js.map