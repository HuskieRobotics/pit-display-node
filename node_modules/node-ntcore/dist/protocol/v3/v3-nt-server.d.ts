/// <reference types="node" />
import { EventEmitter } from "events";
import { Socket } from "net";
import NTEntry, { NTEntryFlags } from "../nt-entry";
import NTServer, { NTServerOptions } from "../nt-server";
import winston from "winston";
export interface V3ServerOptions extends NTServerOptions {
}
export declare class NTClientConnection extends EventEmitter {
    private _socket;
    private _serverEntries;
    private _rpcDefinitions;
    private _dataBuffer;
    private _pendingMessages;
    private _serverIdent;
    private _logger;
    constructor(socket: Socket, serverIdent: string, serverEntries: Map<number, NTEntry>, logger: winston.Logger);
    write(data: Buffer): void;
    private _handleData;
}
export default class V3NTServer extends NTServer {
    private _connections;
    private _entryNameToId;
    private _entries;
    private _rpcDefinitions;
    private _nextId;
    constructor(options?: V3ServerOptions);
    setBoolean(key: string, val: boolean): boolean;
    getBoolean(key: string): boolean;
    setDouble(key: string, val: number): boolean;
    getDouble(key: string): number;
    setString(key: string, val: string): boolean;
    getString(key: string): string;
    setBooleanArray(key: string, val: boolean[]): boolean;
    getBooleanArray(key: string): boolean[];
    setDoubleArray(key: string, val: number[]): boolean;
    getDoubleArray(key: string): number[];
    setStringArray(key: string, val: string[]): boolean;
    getStringArray(key: string): string[];
    setRaw(key: string, val: Buffer): boolean;
    getRaw(key: string): Buffer;
    deleteEntry(key: string): boolean;
    updateEntryFlags(key: string, flags: NTEntryFlags): boolean;
    protected _onSocketConnected(socket: Socket): void;
    private _broadcast;
    private _setEntryData;
    private _getEntry;
}
