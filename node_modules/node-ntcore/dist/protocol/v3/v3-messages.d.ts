/// <reference types="node" />
import { NTEntryFlags, NTEntryValue } from "../nt-entry";
import { V3EntryFlags, V3EntryType, V3MessageType, V3RPCDefinition as V3RPCDefinition, V3RPCParameter, V3RPCResult } from "./v3-types";
export interface V3Message {
    type: V3MessageType;
}
export interface V3KeepAliveMessage extends V3Message {
    type: V3MessageType.KEEP_ALIVE;
}
export interface V3ClientHelloMessage extends V3Message {
    type: V3MessageType.CLIENT_HELLO;
    protocolMajor: number;
    protocolMinor: number;
    clientIdent: string;
}
export interface V3ProtoVersionUnsupportedMessage extends V3Message {
    type: V3MessageType.PROTO_VERSION_UNSUPPORTED;
    serverSupportedProtocolMajor: number;
    serverSupportedProtocolMinor: number;
}
export interface V3ServerHelloCompleteMessage extends V3Message {
    type: V3MessageType.SERVER_HELLO_COMPLETE;
}
export interface V3ServerHelloMessage extends V3Message {
    type: V3MessageType.SERVER_HELLO;
    clientPreviouslySeen: boolean;
    serverIdentity: string;
}
export interface V3ClientHelloCompleteMessage extends V3Message {
    type: V3MessageType.CLIENT_HELLO_COMPLETE;
}
export interface V3EntryAssignmentMessage extends V3Message {
    type: V3MessageType.ENTRY_ASSIGNMENT;
    entryName: string;
    entryType: V3EntryType;
    entryId: number;
    entrySeq: number;
    entryFlags: NTEntryFlags;
    entryValue: NTEntryValue;
}
export interface V3EntryUpdateMessage extends V3Message {
    type: V3MessageType.ENTRY_UPDATE;
    entryType: V3EntryType;
    entryId: number;
    entrySeq: number;
    entryValue: NTEntryValue;
}
export interface V3EntryFlagsUpdateMessage extends V3Message {
    type: V3MessageType.ENTRY_FLAGS_UPDATE;
    entryId: number;
    entryFlags: NTEntryFlags;
}
export interface V3EntryDeleteMessage extends V3Message {
    type: V3MessageType.ENTRY_DELETE;
    entryId: number;
}
export interface V3ClearAllEntriesMessage extends V3Message {
    type: V3MessageType.CLEAR_ALL_ENTRIES;
}
export interface V3RPCExecuteMessage extends V3Message {
    type: V3MessageType.RPC_EXECUTE;
    rpcDefinitionId: number;
    uniqueId: number;
    parameters: V3RPCParameter[];
}
export interface V3RPCResponseMessage extends V3Message {
    type: V3MessageType.RPC_RESPONSE;
    rpcDefinitionId: number;
    uniqueId: number;
    results: V3RPCResult[];
}
export declare function entryFlagsToUInt8(flags: V3EntryFlags): number;
export declare function UInt8ToEntryFlags(flagByte: number): V3EntryFlags;
export interface V3KeepAliveMessageWrapper {
    message: V3KeepAliveMessage;
    newOffset: number;
}
export declare function keepAliveMessageToBuffer(): Buffer;
export declare function keepAliveMessageFromBuffer(buf: Buffer, offset?: number): V3KeepAliveMessageWrapper;
export interface V3ClientHelloMessageWrapper {
    message: V3ClientHelloMessage;
    newOffset: number;
}
export declare function clientHelloMessageToBuffer(msg: V3ClientHelloMessage): Buffer;
export declare function clientHelloMessageFromBuffer(buf: Buffer, offset?: number): V3ClientHelloMessageWrapper;
export interface V3ProtoVersionUnsupportedMessageWrapper {
    message: V3ProtoVersionUnsupportedMessage;
    newOffset: number;
}
export declare function protoVersionUnsupportedMessageToBuffer(msg: V3ProtoVersionUnsupportedMessage): Buffer;
export declare function protoVersionUnsupportedMessageFromBuffer(buf: Buffer, offset?: number): V3ProtoVersionUnsupportedMessageWrapper;
export interface V3ServerHelloCompleteMessageWrapper {
    message: V3ServerHelloCompleteMessage;
    newOffset: number;
}
export declare function serverHelloCompleteMessageToBuffer(): Buffer;
export declare function serverHelloCompleteMessageFromBuffer(buf: Buffer, offset?: number): V3ServerHelloCompleteMessageWrapper;
export interface V3ServerHelloMessageWrapper {
    message: V3ServerHelloMessage;
    newOffset: number;
}
export declare function serverHelloMessageToBuffer(msg: V3ServerHelloMessage): Buffer;
export declare function serverHelloMessageFromBuffer(buf: Buffer, offset?: number): V3ServerHelloMessageWrapper;
export interface V3ClientHelloCompleteMessageWrapper {
    message: V3ClientHelloCompleteMessage;
    newOffset: number;
}
export declare function clientHelloCompleteMessageToBuffer(): Buffer;
export declare function clientHelloCompleteMessageFromBuffer(buf: Buffer, offset?: number): V3ClientHelloCompleteMessageWrapper;
export interface V3EntryAssignmentMessageWrapper {
    message: V3EntryAssignmentMessage;
    newOffset: number;
}
export declare function entryValueToBuffer(type: V3EntryType, valueObj: NTEntryValue): Buffer;
export interface V3EntryValueWrapper {
    value: NTEntryValue;
    newOffset: number;
}
export declare function entryValueFromBuffer(type: V3EntryType, buf: Buffer, offset?: number): V3EntryValueWrapper;
export declare function entryAssignmentMessageToBuffer(msg: V3EntryAssignmentMessage): Buffer;
export declare function entryAssignmentMessageFromBuffer(buf: Buffer, offset?: number): V3EntryAssignmentMessageWrapper;
export interface V3EntryUpdateMessageWrapper {
    message: V3EntryUpdateMessage;
    newOffset: number;
}
export declare function entryUpdateMessageToBuffer(msg: V3EntryUpdateMessage): Buffer;
export declare function entryUpdateMessageFromBuffer(buf: Buffer, offset?: number): V3EntryUpdateMessageWrapper;
export interface V3EntryFlagsUpdateMessageWrapper {
    message: V3EntryFlagsUpdateMessage;
    newOffset: number;
}
export declare function entryFlagsUpdateMessageToBuffer(msg: V3EntryFlagsUpdateMessage): Buffer;
export declare function entryFlagsUpdateMessageFromBuffer(buf: Buffer, offset?: number): V3EntryFlagsUpdateMessageWrapper;
export interface V3EntryDeleteMessageWrapper {
    message: V3EntryDeleteMessage;
    newOffset: number;
}
export declare function entryDeleteMessageToBuffer(msg: V3EntryDeleteMessage): Buffer;
export declare function entryDeleteMessageFromBuffer(buf: Buffer, offset?: number): V3EntryDeleteMessageWrapper;
export interface V3ClearAllEntriesMessageWrapper {
    message: V3ClearAllEntriesMessage;
    newOffset: number;
}
export declare function clearAllEntriesMessageToBuffer(): Buffer;
export declare function clearAllEntriesMessageFromBuffer(buf: Buffer, offset?: number): V3ClearAllEntriesMessageWrapper;
export interface V3RPCExecuteMessageWrapper {
    message: V3RPCExecuteMessage;
    newOffset: number;
}
export declare function rpcExecuteMessageToBuffer(msg: V3RPCExecuteMessage): Buffer;
export declare function rpcExecuteMessageFromBuffer(rpcDefinitions: Map<number, V3RPCDefinition>, buf: Buffer, offset?: number): V3RPCExecuteMessageWrapper;
export interface V3RPCResponseMessageWrapper {
    message: V3RPCResponseMessage;
    newOffset: number;
}
export declare function rpcResponseMessageToBuffer(msg: V3RPCResponseMessage): Buffer;
export declare function rpcResponseMessageFromBuffer(rpcDefinitions: Map<number, V3RPCDefinition>, buf: Buffer, offset?: number): V3RPCResponseMessageWrapper;
export declare function getMessageType(buf: Buffer, offset?: number): V3MessageType;
export interface V3MessageWrapper {
    message: V3Message;
    newOffset: number;
}
export declare function getNextAvailableMessage(rpcDefinitions: Map<number, V3RPCDefinition>, buf: Buffer, offset?: number): V3MessageWrapper | undefined;
export interface RPCDefinitionDecodeResult {
    value: V3RPCDefinition;
    newOffset: number;
}
export declare function decodeRPCDefinition(buf: Buffer, offset?: number): RPCDefinitionDecodeResult;
export declare function encodeRPCDefinition(rpcDef: V3RPCDefinition): Buffer;
