/// <reference types="node" />
import StrictEventEmitter from "strict-event-emitter-types";
import NTClient, { NTClientOptions } from "../nt-client";
import { EventEmitter } from "events";
import { V3ClientHandshakeState } from "./v3-types";
import { V3Message } from "./v3-messages";
import NTEntry, { NTEntryFlags } from "../nt-entry";
import { NTProtocolVersion } from "../nt-types";
import winston from "winston";
export interface V3ClientOptions extends NTClientOptions {
}
interface HandshakeCompleteData {
    clientSideEntries: Map<string, NTEntry>;
}
interface HandshakeManagerEvents {
    stateChange: (oldState: V3ClientHandshakeState, newState: V3ClientHandshakeState) => void;
    handshakeComplete: (data?: HandshakeCompleteData) => void;
    handshakeError: (supportedVersion: NTProtocolVersion) => void;
}
declare type HandshakeManagerEventEmitter = StrictEventEmitter<EventEmitter, HandshakeManagerEvents>;
declare const V3ClientHandshakeManager_base: new () => HandshakeManagerEventEmitter;
export declare class V3ClientHandshakeManager extends V3ClientHandshakeManager_base {
    private _logger;
    private _state;
    private _writeFunc;
    private _ident;
    private _protocolVersion;
    private _serverSideEntries;
    private _clientSideEntries;
    constructor(clientIdent: string, writeFunc: (data: Buffer) => Promise<void>, logger: winston.Logger);
    get protocolVersion(): NTProtocolVersion;
    set protocolVersion(val: NTProtocolVersion);
    beginHandshake(clientEntries?: Map<number, NTEntry>, pendingEntries?: Map<string, NTEntry>): void;
    handleMessage(msg: V3Message): boolean;
}
export default class V3NTClient extends NTClient {
    private _entryNameToId;
    private _entries;
    private _rpcDefinitions;
    private _pendingEntries;
    private _pendingMessages;
    private _dataBuffer;
    private _handshakeManager;
    constructor(options?: V3ClientOptions);
    get identifier(): string;
    setBoolean(key: string, val: boolean): boolean;
    getBoolean(key: string): boolean;
    setDouble(key: string, val: number): boolean;
    getDouble(key: string): number;
    setString(key: string, val: string): boolean;
    getString(key: string): string;
    setBooleanArray(key: string, val: boolean[]): boolean;
    getBooleanArray(key: string): boolean[];
    setDoubleArray(key: string, val: number[]): boolean;
    getDoubleArray(key: string): number[];
    setStringArray(key: string, val: string[]): boolean;
    getStringArray(key: string): string[];
    setRaw(key: string, val: Buffer): boolean;
    getRaw(key: string): Buffer;
    deleteEntry(key: string): boolean;
    updateEntryFlags(key: string, flags: NTEntryFlags): boolean;
    protected _handshake(): Promise<void>;
    protected _handleData(data: Buffer): void;
    private _handleEntryAssignment;
    private _handleEntryUpdate;
    private _handleEntryFlagsUpdate;
    private _handleEntryDelete;
    private _handleClearAllEntries;
    private _handleRPCRespnse;
    private _setEntryData;
    private _getEntry;
}
export {};
