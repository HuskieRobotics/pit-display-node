"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V3_DEFAULT_FLAGS = exports.V3ServerHandshakeState = exports.V3ClientHandshakeState = exports.V3MessageTypeToString = exports.ByteToV3MessageType = exports.CLEAR_ALL_ENTRIES_MAGIC_VALUE = exports.V3MessageType = exports.NTtoV3EntryType = exports.V3toNTEntryType = exports.ByteToV3EntryType = exports.V3EntryType = void 0;
const nt_entry_1 = require("../nt-entry");
var V3EntryType;
(function (V3EntryType) {
    V3EntryType[V3EntryType["BOOLEAN"] = 0] = "BOOLEAN";
    V3EntryType[V3EntryType["DOUBLE"] = 1] = "DOUBLE";
    V3EntryType[V3EntryType["STRING"] = 2] = "STRING";
    V3EntryType[V3EntryType["RAW"] = 3] = "RAW";
    V3EntryType[V3EntryType["BOOLEAN_ARRAY"] = 16] = "BOOLEAN_ARRAY";
    V3EntryType[V3EntryType["DOUBLE_ARRAY"] = 17] = "DOUBLE_ARRAY";
    V3EntryType[V3EntryType["STRING_ARRAY"] = 18] = "STRING_ARRAY";
    V3EntryType[V3EntryType["RPC"] = 32] = "RPC";
})(V3EntryType = exports.V3EntryType || (exports.V3EntryType = {}));
exports.ByteToV3EntryType = {
    0x00: V3EntryType.BOOLEAN,
    0x01: V3EntryType.DOUBLE,
    0x02: V3EntryType.STRING,
    0x03: V3EntryType.RAW,
    0x10: V3EntryType.BOOLEAN_ARRAY,
    0x11: V3EntryType.DOUBLE_ARRAY,
    0x12: V3EntryType.STRING_ARRAY,
    0x20: V3EntryType.RPC
};
// Set up the map of V3EntryType to NTEntryType
exports.V3toNTEntryType = new Map();
exports.V3toNTEntryType.set(V3EntryType.BOOLEAN, nt_entry_1.NTEntryType.BOOLEAN);
exports.V3toNTEntryType.set(V3EntryType.DOUBLE, nt_entry_1.NTEntryType.DOUBLE);
exports.V3toNTEntryType.set(V3EntryType.STRING, nt_entry_1.NTEntryType.STRING);
exports.V3toNTEntryType.set(V3EntryType.DOUBLE_ARRAY, nt_entry_1.NTEntryType.DOUBLE_ARRAY);
exports.V3toNTEntryType.set(V3EntryType.STRING_ARRAY, nt_entry_1.NTEntryType.STRING_ARRAY);
exports.V3toNTEntryType.set(V3EntryType.BOOLEAN_ARRAY, nt_entry_1.NTEntryType.BOOLEAN_ARRAY);
exports.V3toNTEntryType.set(V3EntryType.RAW, nt_entry_1.NTEntryType.RAW);
exports.V3toNTEntryType.set(V3EntryType.RPC, nt_entry_1.NTEntryType.RPC);
// Set up the map of NTEntryType to V3EntryType
exports.NTtoV3EntryType = new Map();
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.BOOLEAN, V3EntryType.BOOLEAN);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.DOUBLE, V3EntryType.DOUBLE);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.STRING, V3EntryType.STRING);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.DOUBLE_ARRAY, V3EntryType.DOUBLE_ARRAY);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.STRING_ARRAY, V3EntryType.STRING_ARRAY);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.BOOLEAN_ARRAY, V3EntryType.BOOLEAN_ARRAY);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.RAW, V3EntryType.RAW);
exports.NTtoV3EntryType.set(nt_entry_1.NTEntryType.RPC, V3EntryType.RPC);
var V3MessageType;
(function (V3MessageType) {
    V3MessageType[V3MessageType["KEEP_ALIVE"] = 0] = "KEEP_ALIVE";
    V3MessageType[V3MessageType["CLIENT_HELLO"] = 1] = "CLIENT_HELLO";
    V3MessageType[V3MessageType["PROTO_VERSION_UNSUPPORTED"] = 2] = "PROTO_VERSION_UNSUPPORTED";
    V3MessageType[V3MessageType["SERVER_HELLO_COMPLETE"] = 3] = "SERVER_HELLO_COMPLETE";
    V3MessageType[V3MessageType["SERVER_HELLO"] = 4] = "SERVER_HELLO";
    V3MessageType[V3MessageType["CLIENT_HELLO_COMPLETE"] = 5] = "CLIENT_HELLO_COMPLETE";
    V3MessageType[V3MessageType["ENTRY_ASSIGNMENT"] = 16] = "ENTRY_ASSIGNMENT";
    V3MessageType[V3MessageType["ENTRY_UPDATE"] = 17] = "ENTRY_UPDATE";
    V3MessageType[V3MessageType["ENTRY_FLAGS_UPDATE"] = 18] = "ENTRY_FLAGS_UPDATE";
    V3MessageType[V3MessageType["ENTRY_DELETE"] = 19] = "ENTRY_DELETE";
    V3MessageType[V3MessageType["CLEAR_ALL_ENTRIES"] = 20] = "CLEAR_ALL_ENTRIES";
    V3MessageType[V3MessageType["RPC_EXECUTE"] = 32] = "RPC_EXECUTE";
    V3MessageType[V3MessageType["RPC_RESPONSE"] = 33] = "RPC_RESPONSE";
})(V3MessageType = exports.V3MessageType || (exports.V3MessageType = {}));
exports.CLEAR_ALL_ENTRIES_MAGIC_VALUE = 0xD06CB27A;
exports.ByteToV3MessageType = {
    0x00: V3MessageType.KEEP_ALIVE,
    0x01: V3MessageType.CLIENT_HELLO,
    0x02: V3MessageType.PROTO_VERSION_UNSUPPORTED,
    0x03: V3MessageType.SERVER_HELLO_COMPLETE,
    0x04: V3MessageType.SERVER_HELLO,
    0x05: V3MessageType.CLIENT_HELLO_COMPLETE,
    0x10: V3MessageType.ENTRY_ASSIGNMENT,
    0x11: V3MessageType.ENTRY_UPDATE,
    0x12: V3MessageType.ENTRY_FLAGS_UPDATE,
    0x13: V3MessageType.ENTRY_DELETE,
    0x14: V3MessageType.CLEAR_ALL_ENTRIES,
    0x20: V3MessageType.RPC_EXECUTE,
    0x21: V3MessageType.RPC_RESPONSE
};
exports.V3MessageTypeToString = new Map();
exports.V3MessageTypeToString.set(V3MessageType.KEEP_ALIVE, "KEEP_ALIVE");
exports.V3MessageTypeToString.set(V3MessageType.CLIENT_HELLO, "CLIENT_HELLO");
exports.V3MessageTypeToString.set(V3MessageType.PROTO_VERSION_UNSUPPORTED, "PROTO_VERSION_UNSUPPORTED");
exports.V3MessageTypeToString.set(V3MessageType.SERVER_HELLO_COMPLETE, "SERVER_HELLO_COMPLETE");
exports.V3MessageTypeToString.set(V3MessageType.SERVER_HELLO, "SERVER_HELLO");
exports.V3MessageTypeToString.set(V3MessageType.CLIENT_HELLO_COMPLETE, "CLIENT_HELLO_COMPLETE");
exports.V3MessageTypeToString.set(V3MessageType.ENTRY_ASSIGNMENT, "ENTRY_ASSIGNMENT");
exports.V3MessageTypeToString.set(V3MessageType.ENTRY_UPDATE, "ENTRY_UPDATE");
exports.V3MessageTypeToString.set(V3MessageType.ENTRY_FLAGS_UPDATE, "ENTRY_FLAGS_UPDATE");
exports.V3MessageTypeToString.set(V3MessageType.ENTRY_DELETE, "ENTRY_DELETE");
exports.V3MessageTypeToString.set(V3MessageType.CLEAR_ALL_ENTRIES, "CLEAR_ALL_ENTRIES");
exports.V3MessageTypeToString.set(V3MessageType.RPC_EXECUTE, "RPC_EXECUTE");
exports.V3MessageTypeToString.set(V3MessageType.RPC_RESPONSE, "RPC_RESPONSE");
// States for the Client-side handshake state machine
var V3ClientHandshakeState;
(function (V3ClientHandshakeState) {
    V3ClientHandshakeState[V3ClientHandshakeState["V3HS_NOT_CONNECTED"] = 0] = "V3HS_NOT_CONNECTED";
    V3ClientHandshakeState[V3ClientHandshakeState["V3HS_AWAIT_SERVER_HELLO"] = 1] = "V3HS_AWAIT_SERVER_HELLO";
    V3ClientHandshakeState[V3ClientHandshakeState["V3HS_AWAIT_SERVER_ENTRIES"] = 2] = "V3HS_AWAIT_SERVER_ENTRIES";
    V3ClientHandshakeState[V3ClientHandshakeState["V3HS_COMPLETE"] = 3] = "V3HS_COMPLETE";
})(V3ClientHandshakeState = exports.V3ClientHandshakeState || (exports.V3ClientHandshakeState = {}));
// States for the Server-side handshake state machine
var V3ServerHandshakeState;
(function (V3ServerHandshakeState) {
    V3ServerHandshakeState[V3ServerHandshakeState["AWAIT_CLIENT_HELLO"] = 0] = "AWAIT_CLIENT_HELLO";
    V3ServerHandshakeState[V3ServerHandshakeState["AWAIT_CLIENT_HELLO_COMPLETE"] = 1] = "AWAIT_CLIENT_HELLO_COMPLETE";
    V3ServerHandshakeState[V3ServerHandshakeState["COMPLETE"] = 2] = "COMPLETE";
})(V3ServerHandshakeState = exports.V3ServerHandshakeState || (exports.V3ServerHandshakeState = {}));
exports.V3_DEFAULT_FLAGS = {
    persistent: false
};
//# sourceMappingURL=v3-types.js.map