/// <reference types="node" />
import StrictEventEmitter from "strict-event-emitter-types";
import { EventEmitter } from "events";
import { NTConnectionState, NTEntryEvent, NTProtocolVersion } from "./nt-types";
import { NTEntryFlags } from "./nt-entry";
import winston from "winston";
export interface NTParticipantOptions {
    identifier?: string;
}
interface NTAccessorEvents {
    connectionStateChanged: (oldState: NTConnectionState, newState: NTConnectionState) => void;
    entryAdded: (entryEvent: NTEntryEvent) => void;
    entryUpdated: (entryEvent: NTEntryEvent) => void;
    entryFlagsUpdated: (entryEvent: NTEntryEvent) => void;
    entryDeleted: (entryEvent: NTEntryEvent) => void;
}
declare type NTAccessorEventEmitter = StrictEventEmitter<EventEmitter, NTAccessorEvents>;
declare const NTParticipant_base: new () => NTAccessorEventEmitter;
/**
 * Abstract class representing a Network Table Participant (NTParticipant)
 *
 * A NTParticipant could be either a server or a client, and represents a node in
 * the NetworkTables network.
 */
export default abstract class NTParticipant extends NTParticipant_base {
    protected _version: NTProtocolVersion;
    protected _identifier: string;
    protected _currState: NTConnectionState;
    protected _logger: winston.Logger;
    constructor(options?: NTParticipantOptions);
    get version(): NTProtocolVersion;
    get identifier(): string;
    set identifier(val: string);
    abstract start(): void;
    abstract stop(): void;
    abstract setBoolean(key: string, val: boolean): boolean;
    abstract getBoolean(key: string): boolean;
    abstract setDouble(key: string, val: number): boolean;
    abstract getDouble(key: string): number;
    abstract setString(key: string, val: string): boolean;
    abstract getString(key: string): string;
    abstract setBooleanArray(key: string, val: boolean[]): boolean;
    abstract getBooleanArray(key: string): boolean[];
    abstract setDoubleArray(key: string, val: number[]): boolean;
    abstract getDoubleArray(key: string): number[];
    abstract setStringArray(key: string, val: string[]): boolean;
    abstract getStringArray(key: string): string[];
    abstract setRaw(key: string, val: Buffer): boolean;
    abstract getRaw(key: string): Buffer;
    abstract deleteEntry(key: string): boolean;
    abstract updateEntryFlags(key: string, flags: NTEntryFlags): boolean;
    protected _setConnectionState(state: NTConnectionState): void;
}
export {};
