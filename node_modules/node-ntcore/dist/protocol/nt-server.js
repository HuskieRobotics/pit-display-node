"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = __importDefault(require("net"));
const nt_participant_1 = __importDefault(require("./nt-participant"));
const nt_types_1 = require("./nt-types");
class NTServer extends nt_participant_1.default {
    constructor(version, options = { port: 1735 }) {
        super(options);
        this._options = options;
        this._version = version;
        this._server = net_1.default.createServer((socket) => __awaiter(this, void 0, void 0, function* () {
            this._onSocketConnected(socket);
        }));
    }
    start() {
        this._server.listen(this._options.port, () => {
            this._logger.info(`NT Server [${this._options.identifier}] listening on port ${this._options.port}`);
            this._setConnectionState(nt_types_1.NTConnectionState.NTCONN_CONNECTED);
        });
    }
    stop() {
        this._server.close(() => {
            this._setConnectionState(nt_types_1.NTConnectionState.NTCONN_NOT_CONNECTED);
        });
    }
}
exports.default = NTServer;
//# sourceMappingURL=nt-server.js.map