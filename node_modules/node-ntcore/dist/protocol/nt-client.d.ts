/// <reference types="node" />
import { NetworkEndpointInfo } from "../transport/transport-types";
import RRSocket from "../transport/rr-socket";
import NTParticipant, { NTParticipantOptions } from "./nt-participant";
import { NTProtocolVersion } from "./nt-types";
export interface NTClientOptions extends NTParticipantOptions {
    address: string;
    port: number;
}
export default abstract class NTClient extends NTParticipant {
    protected _socket: RRSocket;
    protected constructor(version: NTProtocolVersion, options?: NTClientOptions);
    get connected(): boolean;
    set address(val: string);
    get address(): string;
    set port(val: number);
    get port(): number;
    setServerEndpoint(endpoint: NetworkEndpointInfo, forceReconnect?: boolean): void;
    start(): void;
    stop(): void;
    protected _write(data: Buffer, immediate?: boolean): Promise<void>;
    protected abstract _handshake(): Promise<void>;
    protected abstract _handleData(data: Buffer): void;
}
