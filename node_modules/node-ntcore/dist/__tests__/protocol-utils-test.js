"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protocol_utils_1 = require("../protocol/protocol-utils");
describe("Protocol Utils", () => {
    it("should obtain NetworkEndpointInfo-s correctly", () => {
        const result1 = protocol_utils_1.parseNetworkEndpointInfo("localhost", 1735);
        expect(result1.address).toBe("localhost");
        expect(result1.port).toBe(1735);
        const result2 = protocol_utils_1.parseNetworkEndpointInfo("tcp://localhost", 1735);
        expect(result2.address).toBe("localhost");
        expect(result2.port).toBe(1735);
        const result3 = protocol_utils_1.parseNetworkEndpointInfo("localhost:8080", 1735);
        expect(result3.address).toBe("localhost");
        expect(result3.port).toBe(8080);
        const result4 = protocol_utils_1.parseNetworkEndpointInfo("127.0.0.1", 1735);
        expect(result4.address).toBe("127.0.0.1");
        expect(result4.port).toBe(1735);
        const result5 = protocol_utils_1.parseNetworkEndpointInfo("127.0.0.1:8080", 1735);
        expect(result5.address).toBe("127.0.0.1");
        expect(result5.port).toBe(8080);
    });
    it("should calculate LEB128 values correctly", () => {
        const number = 624485;
        const expectedBuffer = Buffer.from([0xE5, 0x8E, 0x26]);
        const encodeResult = protocol_utils_1.toUnsignedLEB128(624485);
        expect(encodeResult).toEqual(expectedBuffer);
        const decodeResult = protocol_utils_1.fromUnsignedLEB128(expectedBuffer, 0);
        expect(decodeResult.value).toBe(number);
    });
    it("should convert strings to/from LEB128 encoding correctly", () => {
        const theString = "the quick brown fox";
        const encodedBuffer = protocol_utils_1.encodeLEB128String(theString);
        const decodedResult = protocol_utils_1.decodeLEB128String(encodedBuffer, 0);
        expect(decodedResult.value).toBe(theString);
    });
});
//# sourceMappingURL=protocol-utils-test.js.map