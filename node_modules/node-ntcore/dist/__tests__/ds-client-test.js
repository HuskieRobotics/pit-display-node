"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ds_client_1 = __importDefault(require("../networktables/ds-client"));
const net_1 = __importDefault(require("net"));
describe("DSClient", () => {
    it("should emit the correct stream of events", (done) => {
        const dsClient = new ds_client_1.default();
        const events = [];
        dsClient.on("ipChanged", addrInfo => {
            events.push(addrInfo);
        });
        const ipAddresses = [
            "192.168.1.1",
            "0.0.0.0",
            "127.0.0.1",
            "10.0.0.2"
        ];
        const expected = [];
        ipAddresses.forEach(ipAddr => {
            const strSplit = ipAddr.split(".");
            const ipNumArr = [];
            strSplit.forEach(part => {
                ipNumArr.push(Number.parseInt(part, 10));
            });
            const buf = Buffer.from(ipNumArr);
            expected.push({
                asUInt32: buf.readUInt32BE(),
                asArray: ipNumArr,
                asString: ipAddr
            });
        });
        const server = net_1.default.createServer((socket) => {
            expected.forEach(info => {
                const obj = { robotIP: info.asUInt32 };
                socket.write(`${JSON.stringify(obj)}\n`);
            });
            setTimeout(() => {
                dsClient.stop();
                server.close(() => {
                    expect(events).toEqual(expected);
                    done();
                });
            }, 1000);
        });
        server.listen(1742);
        dsClient.start();
    });
});
//# sourceMappingURL=ds-client-test.js.map