/// <reference types="node" />
import NetworkTableInstance, { NetworkTableType } from "./network-table-instance";
import NetworkTableValue from "./network-table-value";
export declare enum NetworkTableEntryFlags {
    UNASSIGNED = 0,
    PERSISTENT = 1
}
export interface NTEntryFunctions {
    getLastChange(key: string): number;
    getType(key: string): NetworkTableType;
    getValue(key: string): NetworkTableValue;
    getBoolean(key: string, defaultVal: boolean): boolean;
    getString(key: string, defaultVal: string): string;
    getDouble(key: string, defaultVal: number): number;
    getBooleanArray(key: string, defaultVal: boolean[]): boolean[];
    getStringArray(key: string, defaultVal: string[]): string[];
    getDoubleArray(key: string, defaultVal: number[]): number[];
    getRaw(key: string, defaultVal: Buffer): Buffer;
    setBoolean(key: string, val: boolean): boolean;
    setString(key: string, val: string): boolean;
    setDouble(key: string, val: number): boolean;
    setBooleanArray(key: string, val: boolean[]): boolean;
    setStringArray(key: string, val: string[]): boolean;
    setDoubleArray(key: string, val: number[]): boolean;
    setRaw(key: string, val: Buffer): boolean;
    delete(key: string): boolean;
    exists(key: string): boolean;
    getFlags(key: string): NetworkTableEntryFlags;
    setFlags(key: string, flags: NetworkTableEntryFlags): void;
}
/**
 * NetworkTableEntry accessor
 *
 * A NetworkTableEntry provides a handle to a particular NT entry.
 * This NT entry could be real (exists on the server/network) or
 * pseudo (is pending transmission to the network)
 */
export default class NetworkTableEntry {
    private _instance;
    private _funcs;
    private _guid;
    private _key;
    constructor(inst: NetworkTableInstance, key: string, guid: string, funcs: NTEntryFunctions);
    getName(): string;
    getLastChange(): number;
    getType(): NetworkTableType;
    getValue(): NetworkTableValue;
    getBoolean(defaultVal: boolean): boolean;
    getDouble(defaultVal: number): number;
    getString(defaultVal: string): string;
    getBooleanArray(defaultVal: boolean[]): boolean[];
    getDoubleArray(defaultVal: number[]): number[];
    getStringArray(defaultVal: string[]): string[];
    getRaw(defaultVal: Buffer): Buffer;
    setBoolean(val: boolean): boolean;
    setDouble(val: number): boolean;
    setString(val: string): boolean;
    setBooleanArray(val: boolean[]): boolean;
    setDoubleArray(val: number[]): boolean;
    setStringArray(val: string[]): boolean;
    setRaw(val: Buffer): boolean;
    exists(): boolean;
    delete(): boolean;
    getFlags(): NetworkTableEntryFlags;
    setFlags(flags: NetworkTableEntryFlags): void;
    clearFlags(flags: NetworkTableEntryFlags): void;
    setPersistent(): void;
    clearPersistent(): void;
    isPersistent(): boolean;
}
