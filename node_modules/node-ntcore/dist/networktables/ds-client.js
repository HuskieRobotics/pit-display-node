"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const net_1 = require("net");
const log_util_1 = __importDefault(require("../utils/log-util"));
const DS_INTERFACE_PORT = 1742;
class DSClient extends events_1.EventEmitter {
    constructor(logger) {
        super();
        this._connected = false;
        this._socket = new net_1.Socket();
        if (logger) {
            this._logger = logger;
        }
        else {
            this._logger = log_util_1.default.getLogger("DSClient");
        }
        this._socket.on("data", (data) => {
            if (!this._bufferStr) {
                this._bufferStr = data.toString();
            }
            else {
                this._bufferStr = this._bufferStr + data.toString();
            }
            this._handleData();
        });
        this._socket.on("close", () => {
            this._connected = false;
            this.emit("disconnected");
        });
    }
    start() {
        if (!this._connected) {
            this._socket.connect({
                host: "localhost",
                port: DS_INTERFACE_PORT
            }, () => {
                this._connected = true;
                this.emit("connected");
            });
        }
    }
    stop() {
        this._socket.end(() => {
            this._connected = false;
            this.emit("disconnected");
        });
    }
    _handleData() {
        // Split on newlines
        const newlineRegexp = /\n/;
        let match;
        while ((match = newlineRegexp.exec(this._bufferStr))) {
            const str = this._bufferStr.substring(0, match.index);
            try {
                const obj = JSON.parse(str);
                if (obj.robotIP !== undefined) {
                    const ipUInt32 = obj.robotIP;
                    const buf = Buffer.alloc(4);
                    buf.writeUInt32BE(ipUInt32);
                    const ipArr = [...buf];
                    this.emit("ipChanged", {
                        asUInt32: ipUInt32,
                        asArray: ipArr,
                        asString: ipArr.join(".")
                    });
                }
            }
            catch (err) {
                this._logger.error("Failed to parse JSON: ", err);
            }
            this._bufferStr = this._bufferStr.substring(match.index + 1);
        }
    }
}
exports.default = DSClient;
//# sourceMappingURL=ds-client.js.map