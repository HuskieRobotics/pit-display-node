import NetworkTableEntry from "./network-table-entry";
import NetworkTableInstance, { EntryListenerFlags, NetworkTableType } from "./network-table-instance";
import NetworkTableValue from "./network-table-value";
export declare type TableEntryListener = (table: NetworkTable, key: string, entry: NetworkTableEntry, value: NetworkTableValue, flags: EntryListenerFlags) => void;
export declare type TableCreationListener = (parent: NetworkTable, name: string, table: NetworkTable) => void;
export default class NetworkTable {
    /**
     * Gets the base name of a key. e.g. "/foo/bar" becomes "bar".
     * If the key has a trailing slash, returns an empty string
     * @param key
     */
    static basenameKey(key: string): string;
    /**
     * Normalizes a key by removing consecutive slashes and optionally starting
     * with a leading slash. E.g.
     *
     * normalizeKey("/foo/bar", true) => "/foo/bar"
     * normalizeKey("foo/bar", true) => "/foo/bar"
     * normalizeKey("/foo/bar", false) => "foo/bar"
     * normalizeKey("foo//bar", false) => "foo/bar"
     * @param key
     * @param withLeadingSlash whether or not the normalized key should begin with a leading slash
     */
    static normalizeKey(key: string, withLeadingSlash?: boolean): string;
    /**
     * Gets a list of all the super tables of a given key.
     * E.g. the key "/foo/bar/baz" has hierarchy of "/", "/foo", "/foo/bar", "/foo/bar/baz"
     * @param key
     */
    static getHierarchy(key: string): string[];
    private _path;
    private _pathWithSep;
    private _instance;
    private _entries;
    constructor(instance: NetworkTableInstance, path: string);
    toString(): string;
    /**
     * Get the entry for a sub key
     * @param key
     */
    getEntry(key: string): NetworkTableEntry;
    addEntryListener(key: string | null, listener: TableEntryListener, listenerFlags: EntryListenerFlags): string;
    removeEntryListener(guid: string): void;
    addSubTableListener(listener: TableCreationListener, localNotify: boolean): string;
    removeSubTableListener(guid: string): void;
    getSubTable(key: string): NetworkTable;
    containsKey(key: string): boolean;
    containsSubTable(key: string): boolean;
    getKeys(types?: NetworkTableType): Set<string>;
    getSubTables(): Set<string>;
    delete(key: string): void;
    getPath(): string;
    saveEntries(filename: string): void;
    loadEntries(filename: string): string[];
}
