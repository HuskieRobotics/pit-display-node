/// <reference types="node" />
import { EventEmitter } from "events";
import StrictEventEmitter from "strict-event-emitter-types/types/src";
import winston from "winston";
export interface ServerIPAddressInfo {
    asUInt32: number;
    asArray: number[];
    asString: string;
}
interface DSClientEvents {
    connected: void;
    disconnected: void;
    ipChanged: (addrInfo: ServerIPAddressInfo) => void;
}
declare type DSClientEventEmitter = StrictEventEmitter<EventEmitter, DSClientEvents>;
declare const DSClient_base: new () => DSClientEventEmitter;
export default class DSClient extends DSClient_base {
    private _socket;
    private _connected;
    private _bufferStr;
    private _logger;
    constructor(logger?: winston.Logger);
    start(): void;
    stop(): void;
    private _handleData;
}
export {};
