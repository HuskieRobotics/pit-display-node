import NTEntry, { NTEntryType } from "../protocol/nt-entry";
import NetworkTableEntry from "./network-table-entry";
import NetworkTable from "./network-table";
import NetworkTableValue from "./network-table-value";
import { LogLevel } from "../utils/log-util";
export declare const NT_PATH_SEPARATOR = "/";
export declare enum EntryListenerFlags {
    IMMEDIATE = 1,
    LOCAL = 2,
    NEW = 4,
    DELETE = 8,
    UPDATE = 16,
    FLAGS = 32
}
export declare type EntryListener = (key: string, entry: NetworkTableEntry, value: NetworkTableValue, flags: EntryListenerFlags) => void;
export declare enum OperatingMode {
    CLIENT = 0,
    SERVER = 1,
    LOCAL = 2,
    UNCONFIGURED = 3
}
export declare enum ConnectionState {
    OFFLINE = 0,
    CONNECTING = 1,
    ONLINE = 2
}
export interface RawNTEntryInfo {
    entry: NTEntry;
    lastUpdate: number;
}
export interface NetworkTableEntryInfo {
    entry: NetworkTableEntry;
    key: string;
    isPending?: boolean;
}
export declare enum NetworkTableType {
    UNASSIGNED = 0,
    BOOLEAN = 1,
    DOUBLE = 2,
    STRING = 4,
    RAW = 8,
    BOOLEAN_ARRAY = 16,
    DOUBLE_ARRAY = 32,
    STRING_ARRAY = 64,
    RPC = 128
}
export declare function toNTEntryType(type: NetworkTableType): NTEntryType;
export declare function toNetworkTableType(type: NTEntryType): NetworkTableType;
export default class NetworkTableInstance {
    private static s_instances;
    static getDefault(): NetworkTableInstance;
    static create(): NetworkTableInstance;
    private _guid;
    private _logger;
    private _logLevel;
    private _ntEntries;
    private _pendingNtEntries;
    private _entryGuidMap;
    private _pendingEntryGuids;
    private _entries;
    private _tables;
    private _ntParticipant;
    private _netIdentity;
    private _opMode;
    private _connState;
    private _entryListeners;
    private _entryFuncs;
    protected constructor(guid: string);
    setLogLevel(val: LogLevel | string): void;
    get guid(): string;
    setNetworkIdentity(ident: string): void;
    getEntry(key: string): NetworkTableEntry;
    getEntries(prefix: string, typeFilter?: NetworkTableType): NetworkTableEntry[];
    getTable(key: string): NetworkTable;
    addEntryListener(prefixOrEntry: string | NetworkTableEntry, listener: EntryListener, flags: EntryListenerFlags): string;
    removeEntryListener(guid: string): void;
    startClient(hostAddr: string, port?: number): void;
    stopClient(): void;
    startServer(persistFile: string, port?: number): void;
    stopServer(): void;
    setServer(address: string, port?: number): void;
    private _hookupNTEvents;
    private _onEntryAdded;
    private _onEntryUpdated;
    private _onEntryFlagsUpdated;
    private _onEntryDeleted;
    private _informListeners;
    private _entryGetLastChange;
    private _entryGetType;
    private _entryGetValue;
    private _entryGetBoolean;
    private _entryGetString;
    private _entryGetDouble;
    private _entryGetBooleanArray;
    private _entryGetStringArray;
    private _entryGetDoubleArray;
    private _entryGetRaw;
    private _entrySetBoolean;
    private _entrySetString;
    private _entrySetDouble;
    private _entrySetBooleanArray;
    private _entrySetStringArray;
    private _entrySetDoubleArray;
    private _entrySetRaw;
    private _entryDelete;
    private _entryExists;
    private _entryGetFlags;
    private _entrySetFlags;
    private _insertPendingEntry;
    private _typecheckValue;
}
